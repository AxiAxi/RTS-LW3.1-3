{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Aspire\\\\projects\\\\studyAll\\\\RTS\\\\3\\\\AwesomeProject\\\\App.js\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\n\nvar fErmatFactorization = function fErmatFactorization(number) {\n  if (number <= 0 || !Number.isInteger(number)) {\n    return;\n  }\n\n  ;\n\n  if (number % 2 === 0) {\n    return [number / 2, 2];\n  }\n\n  ;\n  var a = Math.ceil(Math.sqrt(number));\n\n  if (Math.pow(a, 2) === number) {\n    return [a, a];\n  }\n\n  ;\n  var b;\n\n  while (true) {\n    var b1 = Math.pow(a, 2) - number;\n    b = Math.sqrt(b1) | 0;\n\n    if (Math.pow(b, 2) === b1) {\n      break;\n    } else {\n      a++;\n    }\n\n    ;\n  }\n\n  ;\n  return [a - b, a + b];\n};\n\nvar P = 4;\nvar POINTS = [{\n  x1: 0,\n  x2: 6,\n  highLowRule: +1\n}, {\n  x1: 1,\n  x2: 5,\n  highLowRule: +1\n}, {\n  x1: 3,\n  x2: 3,\n  highLowRule: -1\n}, {\n  x1: 2,\n  x2: 4,\n  highLowRule: -1\n}];\nvar accuracy = 5;\n\nvar outputSignal = function outputSignal(point, w1, w2) {\n  return +(point.x1 * w1 + point.x2 * w2).toFixed(accuracy);\n};\n\nvar highLowCheck = function highLowCheck(point, y, P) {\n  if (point.highLowRule === +1) {\n    return y > P;\n  } else if (point.highLowRule === -1) {\n    return y < P;\n  }\n\n  ;\n};\n\nvar w = function w(_w, deltaRule, x, learningSpeed) {\n  return +(_w + deltaRule * x * learningSpeed).toFixed(accuracy);\n};\n\nvar outputSignalCheck = function outputSignalCheck(points, w1, w2) {\n  var successCounter = 0;\n\n  for (var _iterator = points, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var _point = _ref;\n    highLowCheck(_point, outputSignal(_point, w1, w2), P) && successCounter++;\n  }\n\n  ;\n  return successCounter === POINTS.length;\n};\n\nvar perceptronTraining = function perceptronTraining(P, accuracy, learningSpeed, deadlines) {\n  var paramW1 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var paramW2 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  var turn = 0;\n  var w1 = paramW1,\n      w2 = paramW2;\n  var deltaRule = 0;\n  var iretationCounter = 0;\n  var performanceStart = performance.now();\n  var performanceEnd;\n\n  while (true) {\n    var point = POINTS[turn];\n    var y = outputSignal(point, w1, w2);\n\n    if (highLowCheck(point, y, P) && outputSignalCheck(POINTS, w1, w2)) {\n      break;\n    }\n\n    ;\n    deltaRule = +(P - y).toFixed(accuracy);\n    w1 = w(w1, deltaRule, point.x1, learningSpeed);\n    w2 = w(w2, deltaRule, point.x2, learningSpeed);\n    turn === POINTS.length - 1 ? turn = 0 : turn++;\n    iretationCounter++;\n\n    if (deadlines.temporal.isUsed) {\n      performanceEnd = performance.now();\n\n      if (performance.now() - performanceStart >= deadlines.temporal.seconds * 1000) {\n        break;\n      }\n\n      ;\n    }\n\n    ;\n\n    if (deadlines.iterative.isUsed) {\n      if (iretationCounter >= deadlines.iterative.iterations) {\n        break;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  ;\n  performanceEnd = performance.now();\n  var perceptronPerformanceTime = performanceEnd - performanceStart || 0;\n  return [w1, w2, perceptronPerformanceTime, iretationCounter];\n};\n\nvar geneticAccuracy = 0;\n\nvar f = function f(a, b, c, d, EQUATION) {\n  return +(a * EQUATION.x1 + b * EQUATION.x2 + c * EQUATION.x3 + d * EQUATION.x4).toFixed(geneticAccuracy);\n};\n\nvar populationGenerator = function populationGenerator(genotypeQuantity, BOUNDARY) {\n  var population = [];\n\n  for (var gene = 0; gene < genotypeQuantity; gene++) {\n    var genotype = [];\n\n    for (var id = 0; id < 4; id++) {\n      genotype[id] = +(Math.random() * BOUNDARY).toFixed(geneticAccuracy);\n    }\n\n    ;\n    population.push(genotype);\n  }\n\n  ;\n  return population;\n};\n\nvar genotypeCrossing = function genotypeCrossing(genotypeA, genotypeB, crossoverLineIndex) {\n  var crossoverGeneA = genotypeA.slice(0, crossoverLineIndex);\n  var crossoverGeneB = genotypeB.slice(0, crossoverLineIndex);\n  var newGenotypeA = [].concat(_toConsumableArray(crossoverGeneB), _toConsumableArray(genotypeA.slice(crossoverLineIndex, genotypeA.length)));\n  var newGenotypeB = [].concat(_toConsumableArray(crossoverGeneA), _toConsumableArray(genotypeB.slice(crossoverLineIndex, genotypeB.length)));\n  return [newGenotypeA, newGenotypeB];\n};\n\nvar geneticAlgorithm = function geneticAlgorithm(generationsQuantityParam, crossoverLineIndex, BOUNDARY, EQUATION) {\n  var performanceStart = performance.now();\n  var generationsQuantity = generationsQuantityParam;\n  var performanceEnd, geneticAlgorithmPerformance;\n  var population = populationGenerator(generationsQuantity, BOUNDARY);\n\n  while (generationsQuantity >= 4) {\n    var deltas = [];\n\n    for (var gene = 0; gene < population.length; gene++) {\n      var geneDelta = +Math.abs(f.apply(void 0, _toConsumableArray(population[gene]).concat([EQUATION])) - EQUATION.y).toFixed(geneticAccuracy);\n\n      if (geneDelta === 0) {\n        performanceEnd = performance.now();\n        geneticAlgorithmPerformance = performanceEnd - performanceStart;\n        return {\n          population: population[gene],\n          generation: generationsQuantity / generationsQuantityParam,\n          deviance: 0,\n          performanceTime: geneticAlgorithmPerformance\n        };\n      }\n\n      ;\n      deltas.push(geneDelta);\n    }\n\n    ;\n    var reverseDeltas = deltas.map(function (delta) {\n      return Math.pow(delta, -1);\n    });\n    var totalDeltasSum = deltas.reduce(function (deltasSum, delta) {\n      return deltasSum + Math.pow(delta, -1);\n    }, 0);\n    var genotypeChoiceProbability = [];\n\n    for (var _gene = 0; _gene < deltas.length; _gene++) {\n      genotypeChoiceProbability.push(+(reverseDeltas[_gene] / totalDeltasSum).toFixed(geneticAccuracy));\n    }\n\n    ;\n    var parentCoupleWithProbability = [].concat(genotypeChoiceProbability).sort().reverse().reduce(function (result, value, index, array) {\n      index % 2 === 0 && result.push(array.slice(index, index + 2));\n      return result;\n    }, []).slice(0, genotypeChoiceProbability.length / 4);\n    var parentCoupleWithValues = [];\n\n    for (var _gene2 = 0; _gene2 < parentCoupleWithProbability.length; _gene2++) {\n      parentCoupleWithValues.push([population[genotypeChoiceProbability.indexOf(parentCoupleWithProbability[_gene2][0])], population[genotypeChoiceProbability.indexOf(parentCoupleWithProbability[_gene2][1])]]);\n    }\n\n    ;\n    population = [];\n\n    for (var _gene3 = 0; _gene3 < parentCoupleWithValues.length; _gene3++) {\n      var _population;\n\n      (_population = population).push.apply(_population, _toConsumableArray(genotypeCrossing.apply(void 0, _toConsumableArray(parentCoupleWithValues[_gene3]).concat([crossoverLineIndex]))));\n    }\n\n    ;\n    generationsQuantity /= 2;\n  }\n\n  ;\n  performanceEnd = performance.now();\n  geneticAlgorithmPerformance = performanceEnd - performanceStart;\n  var deviance = ((f.apply(void 0, _toConsumableArray(population[0])) - EQUATION.y) / f.apply(void 0, _toConsumableArray(population[0]).concat([EQUATION]))).toFixed(2) * 100;\n  return {\n    population: population,\n    generation: Math.log2(generationsQuantityParam) - 1,\n    deviance: deviance,\n    performanceTime: geneticAlgorithmPerformance\n  };\n};\n\nexport default function App() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      factorizedNumber = _useState2[0],\n      setFactorizedNumber = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      factorizedNumberAnswer = _useState4[0],\n      setFactorizedNumberAnswer = _useState4[1];\n\n  var _useState5 = useState(.001),\n      _useState6 = _slicedToArray(_useState5, 2),\n      learningSpeed = _useState6[0],\n      setLearningSpeed = _useState6[1];\n\n  var _useState7 = useState(.05),\n      _useState8 = _slicedToArray(_useState7, 2),\n      temporalDeadline = _useState8[0],\n      setTemporalDeadline = _useState8[1];\n\n  var _useState9 = useState(100),\n      _useState10 = _slicedToArray(_useState9, 2),\n      iterativeDeadline = _useState10[0],\n      setIterativeDeadline = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      perceptronTrainingAnswer = _useState12[0],\n      setPerceptronTrainingAnswer = _useState12[1];\n\n  var _useState13 = useState({}),\n      _useState14 = _slicedToArray(_useState13, 2),\n      equation = _useState14[0],\n      setEquation = _useState14[1];\n\n  var _useState15 = useState(0),\n      _useState16 = _slicedToArray(_useState15, 2),\n      generationsQuantity = _useState16[0],\n      setGenerationsQuantity = _useState16[1];\n\n  var _useState17 = useState(0),\n      _useState18 = _slicedToArray(_useState17, 2),\n      crossoverLineIndex = _useState18[0],\n      setCrossoverLineIndex = _useState18[1];\n\n  var _useState19 = useState({}),\n      _useState20 = _slicedToArray(_useState19, 2),\n      equationAnswer = _useState20[0],\n      setEquationAnswer = _useState20[1];\n\n  var deadlines = {\n    temporal: {\n      isUsed: temporalDeadline > 0,\n      seconds: temporalDeadline\n    },\n    iterative: {\n      isUsed: iterativeDeadline > 0,\n      iterations: iterativeDeadline\n    }\n  };\n  console.log(equationAnswer.deviance);\n  var BOUNDARY = +(equation.y / 2).toFixed(geneticAccuracy) || 0;\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    }\n  }, React.createElement(Text, {\n    style: styles.header,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    }\n  }, \"Fermat's Factorization Method\"), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    }\n  }, \"A  *  B  =  \" + (factorizedNumber || '')), React.createElement(TextInput, {\n    placeholder: \"Set Number\",\n    keyboardType: \"number-pad\",\n    onChangeText: function onChangeText(text) {\n      return setFactorizedNumber(text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    }\n  }), React.createElement(Button, {\n    title: \"Number Factorization\",\n    onPress: function onPress() {\n      return setFactorizedNumberAnswer(fErmatFactorization(+factorizedNumber));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    }\n  }), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    }\n  }, factorizedNumberAnswer && \"A  =  \" + factorizedNumberAnswer[0] + \"  &  B  =  \" + factorizedNumberAnswer[1]), React.createElement(Text, {\n    style: styles.header,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    }\n  }, \"Perceptron Model\"), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    }\n  }, \"Trigger Threshold: P = 4\"), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    }\n  }, \"Points: +A(0, 6), +B(1, 5), -C(3, 3) And -D(2, 4)\"), React.createElement(TextInput, {\n    placeholder: \"Learning Speed (0.001 by default)\",\n    keyboardType: \"number-pad\",\n    onChangeText: function onChangeText(text) {\n      return setLearningSpeed(text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Temporal Deadline, seconds (0.5s by default)\",\n    keyboardType: \"number-pad\",\n    onChangeText: function onChangeText(text) {\n      return setTemporalDeadline(text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Iterative Deadline (100 by default)\",\n    keyboardType: \"number-pad\",\n    onChangeText: function onChangeText(text) {\n      return setIterativeDeadline(text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    }\n  }), React.createElement(Button, {\n    title: \"Train Perceptron\",\n    onPress: function onPress() {\n      return setPerceptronTrainingAnswer(perceptronTraining(P, 5, learningSpeed, deadlines));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    }\n  }), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    }\n  }, perceptronTrainingAnswer && \"W1  =  \" + perceptronTrainingAnswer[0] + \"  &  W2  =  \" + perceptronTrainingAnswer[1]), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    }\n  }, perceptronTrainingAnswer && \"Time spent:  \" + perceptronTrainingAnswer[2].toFixed(5) + \" ms\"), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    }\n  }, perceptronTrainingAnswer && \"Iterations: \" + perceptronTrainingAnswer[3]), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    }\n  }, perceptronTrainingAnswer && 'Checkup:'), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    }\n  }, perceptronTrainingAnswer && \"A: \" + POINTS[0].x1 + \" * \" + perceptronTrainingAnswer[0] + \" + \" + POINTS[0].x2 + \" * \" + perceptronTrainingAnswer[1] + \" = \" + outputSignal(POINTS[0], perceptronTrainingAnswer[0], perceptronTrainingAnswer[1]) + \" > P\"), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    }\n  }, perceptronTrainingAnswer && \"B: \" + POINTS[1].x1 + \" * \" + perceptronTrainingAnswer[0] + \" + \" + POINTS[1].x2 + \" * \" + perceptronTrainingAnswer[1] + \" = \" + outputSignal(POINTS[1], perceptronTrainingAnswer[0], perceptronTrainingAnswer[1]) + \" > P\"), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    }\n  }, perceptronTrainingAnswer && \"C: \" + POINTS[2].x1 + \" * \" + perceptronTrainingAnswer[0] + \" + \" + POINTS[2].x2 + \" * \" + perceptronTrainingAnswer[1] + \" = \" + outputSignal(POINTS[2], perceptronTrainingAnswer[0], perceptronTrainingAnswer[1]) + \" < P\"), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    }\n  }, perceptronTrainingAnswer && \"D: \" + POINTS[3].x1 + \" * \" + perceptronTrainingAnswer[0] + \" + \" + POINTS[3].x2 + \" * \" + perceptronTrainingAnswer[1] + \" = \" + outputSignal(POINTS[3], perceptronTrainingAnswer[0], perceptronTrainingAnswer[1]) + \" < P\"), React.createElement(Text, {\n    style: styles.header,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    }\n  }, \"Genetic Algorithm Research\"), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    }\n  }, \"Diophantine Equation: a * \" + (equation.x1 || 'x1') + \" + b * \" + (equation.x2 || 'x2') + \" + c * \" + (equation.x3 || 'x3') + \" + d * \" + (equation.x4 || 'x4') + \" = \" + (equation.y || 'y')), React.createElement(TextInput, {\n    placeholder: \"Enter commas separated values of x1, x2, x3, x4, y\",\n    onChangeText: function onChangeText(text) {\n      var newEquationFromText = JSON.parse(\"[\" + text + \"]\");\n      var newEquation = {\n        x1: newEquationFromText[0],\n        x2: newEquationFromText[1],\n        x3: newEquationFromText[2],\n        x4: newEquationFromText[3],\n        y: newEquationFromText[4]\n      };\n      setEquation(newEquation);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Generations Quantity (2^value desirable)\",\n    keyboardType: \"number-pad\",\n    onChangeText: function onChangeText(text) {\n      return setGenerationsQuantity(text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Enter Crossover Line Index (1, 2 or 3)\",\n    keyboardType: \"number-pad\",\n    onChangeText: function onChangeText(text) {\n      return setCrossoverLineIndex(text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    }\n  }), React.createElement(Button, {\n    title: \"Integer Roots Search\",\n    onPress: function onPress() {\n      return setEquationAnswer(geneticAlgorithm(generationsQuantity, crossoverLineIndex, BOUNDARY, equation));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    }\n  }), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    }\n  }, equationAnswer.population && \"a  =  \" + equationAnswer.population[0] + \"  &  b  =  \" + equationAnswer.population[1] + \"  &  c  =  \" + equationAnswer.population[2] + \"  &  d  =  \" + equationAnswer.population[3]), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    }\n  }, equationAnswer.generation && \"Generation: \" + equationAnswer.generation), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    }\n  }, equationAnswer.population && \"Deviance: \" + equationAnswer.deviance), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    }\n  }, equationAnswer.performanceTime && \"Time spent:  \" + equationAnswer.performanceTime.toFixed(5) + \" ms\"), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    }\n  }, equationAnswer.population && 'Checkup:'), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    }\n  }, equationAnswer.population && equationAnswer.population[0] + \" * \" + equation.x1 + \" + \" + equationAnswer.population[1] + \" * \" + equation.x2 + \" + \" + equationAnswer.population[2] + \" * \" + equation.x3 + \" + \" + equationAnswer.population[3] + \" * \" + equation.x4 + \" = \" + equation.y));\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n    paddingTop: 30\n  },\n  ender: {\n    fontSize: 16,\n    paddingBottom: 30\n  }\n});","map":{"version":3,"sources":["C:/Users/Aspire/projects/studyAll/RTS/3/AwesomeProject/App.js"],"names":["React","useState","fErmatFactorization","number","Number","isInteger","a","Math","ceil","sqrt","b","b1","P","POINTS","x1","x2","highLowRule","accuracy","outputSignal","point","w1","w2","toFixed","highLowCheck","y","w","deltaRule","x","learningSpeed","outputSignalCheck","points","successCounter","length","perceptronTraining","deadlines","paramW1","paramW2","turn","iretationCounter","performanceStart","performance","now","performanceEnd","temporal","isUsed","seconds","iterative","iterations","perceptronPerformanceTime","geneticAccuracy","f","c","d","EQUATION","x3","x4","populationGenerator","genotypeQuantity","BOUNDARY","population","gene","genotype","id","random","push","genotypeCrossing","genotypeA","genotypeB","crossoverLineIndex","crossoverGeneA","slice","crossoverGeneB","newGenotypeA","newGenotypeB","geneticAlgorithm","generationsQuantityParam","generationsQuantity","geneticAlgorithmPerformance","deltas","geneDelta","abs","generation","deviance","performanceTime","reverseDeltas","map","delta","totalDeltasSum","reduce","deltasSum","genotypeChoiceProbability","parentCoupleWithProbability","sort","reverse","result","value","index","array","parentCoupleWithValues","indexOf","log2","App","factorizedNumber","setFactorizedNumber","factorizedNumberAnswer","setFactorizedNumberAnswer","setLearningSpeed","temporalDeadline","setTemporalDeadline","iterativeDeadline","setIterativeDeadline","perceptronTrainingAnswer","setPerceptronTrainingAnswer","equation","setEquation","setGenerationsQuantity","setCrossoverLineIndex","equationAnswer","setEquationAnswer","console","log","styles","container","header","text","newEquationFromText","JSON","parse","newEquation","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor","paddingTop","ender","fontSize","paddingBottom"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, View, Text, TextInput, Button } from 'react-native';\n\nconst fErmatFactorization = number => {\n    \n  if ((number <= 0) || !(Number.isInteger(number))) {\n      return;\n  };\n  \n  if ((number % 2) === 0) {\n      return [number / 2, 2];\n  };\n  \n  let a = Math.ceil(Math.sqrt(number));\n  \n  if (a**2 === number) {\n      return [a, a];\n  };\n  \n  let b;\n  \n  while (true) {\n      let b1 = a**2 - number;\n      \n      b = Math.sqrt(b1) | 0;\n      \n      if (b**2 === b1) {\n          break;\n      } else {\n          a++;\n      };\n  };\n  \n  return [a - b, a + b];\n};\n\nconst P = 4;\n\nconst POINTS = [\n    {x1: 0, x2: 6, highLowRule: +1},\n    {x1: 1, x2: 5, highLowRule: +1},\n    {x1: 3, x2: 3, highLowRule: -1},\n    {x1: 2, x2: 4, highLowRule: -1}\n];\n\nconst accuracy = 5;\n\nconst outputSignal = (point, w1, w2) => +(point.x1 * w1 + point.x2 * w2).toFixed(accuracy);\n\nconst highLowCheck = (point, y, P) => {\n    if (point.highLowRule === +1) {\n        return y > P;\n    } else if (point.highLowRule === -1) {\n        return y < P;\n    };\n};\n\nconst w = (w, deltaRule, x, learningSpeed) => +(w + deltaRule * x * learningSpeed).toFixed(accuracy);\n\nconst outputSignalCheck = (points, w1, w2) => {\n    let successCounter = 0;\n    for (const point of points) {\n        highLowCheck(point, outputSignal(point, w1, w2), P) && successCounter++;\n    };\n    return successCounter === POINTS.length;\n};\n\nconst perceptronTraining = (P, accuracy, learningSpeed, deadlines, paramW1 = 0, paramW2 = 0) => {\n    let turn = 0;\n    let w1 = paramW1, w2 = paramW2;\n    let deltaRule = 0;\n    let iretationCounter = 0;\n    const performanceStart = performance.now();\n    let performanceEnd;\n    while (true) {\n        const point = POINTS[turn];\n        const y = outputSignal(point, w1, w2);\n        if (highLowCheck(point, y, P) && outputSignalCheck(POINTS, w1, w2)) {\n            break;\n        };\n        deltaRule = +(P - y).toFixed(accuracy);\n        w1 = w(w1, deltaRule, point.x1, learningSpeed);\n        w2 = w(w2, deltaRule, point.x2, learningSpeed);\n        (turn === POINTS.length - 1) ? turn = 0 : turn++;\n        iretationCounter++;\n        if (deadlines.temporal.isUsed) {\n            performanceEnd = performance.now();\n            if ((performance.now() - performanceStart) >= (deadlines.temporal.seconds * 1000)) {\n                break;\n            };\n        };\n        if (deadlines.iterative.isUsed) {\n            if (iretationCounter >= deadlines.iterative.iterations) {\n                break;\n            };\n        };\n    };\n    performanceEnd = performance.now();\n    const perceptronPerformanceTime = performanceEnd - performanceStart || 0;\n    return [w1, w2, perceptronPerformanceTime, iretationCounter];\n};\n\nconst geneticAccuracy = 0;\n\nconst f = (a, b, c, d, EQUATION) => +(a * EQUATION.x1 + b * EQUATION.x2 + c * EQUATION.x3 + d * EQUATION.x4).toFixed(geneticAccuracy);\n\nconst populationGenerator = (genotypeQuantity, BOUNDARY) => {\n    const population = [];\n    for (let gene = 0; gene < genotypeQuantity; gene++) {\n        const genotype = [];\n        for (let id = 0; id < 4; id++) {\n            genotype[id] = +(Math.random() * BOUNDARY).toFixed(geneticAccuracy);\n        };\n        population.push(genotype);\n    };\n    return population;\n};\n\nconst genotypeCrossing = (genotypeA, genotypeB, crossoverLineIndex) => {\n    const crossoverGeneA = genotypeA.slice(0, crossoverLineIndex);\n    const crossoverGeneB = genotypeB.slice(0, crossoverLineIndex);\n    const newGenotypeA = [...crossoverGeneB, ...genotypeA.slice(crossoverLineIndex, genotypeA.length)];\n    const newGenotypeB = [...crossoverGeneA, ...genotypeB.slice(crossoverLineIndex, genotypeB.length)];\n    return [newGenotypeA, newGenotypeB];\n};\n\nconst geneticAlgorithm = (generationsQuantityParam, crossoverLineIndex, BOUNDARY, EQUATION) => {\n    const performanceStart = performance.now();\n    let generationsQuantity = generationsQuantityParam;\n    let performanceEnd, geneticAlgorithmPerformance;\n    let population = populationGenerator(generationsQuantity, BOUNDARY);\n    while (generationsQuantity >= 4) {\n        const deltas = [];\n        for (let gene = 0; gene < population.length; gene++) {\n            const geneDelta = +Math.abs((f(...population[gene], EQUATION) - EQUATION.y)).toFixed(geneticAccuracy);\n            if (geneDelta === 0) {\n                performanceEnd = performance.now();\n                geneticAlgorithmPerformance = performanceEnd - performanceStart;\n                return {\n                    population: population[gene],\n                    generation: (generationsQuantity / generationsQuantityParam),\n                    deviance: 0,\n                    performanceTime: geneticAlgorithmPerformance\n                };\n            };\n            deltas.push(geneDelta);\n        };\n        const reverseDeltas = deltas.map(delta => delta**(-1));\n        const totalDeltasSum = deltas.reduce((deltasSum, delta) => deltasSum + delta**(-1), 0);\n        const genotypeChoiceProbability = [];\n        for (let gene = 0; gene < deltas.length; gene++) {\n            genotypeChoiceProbability.push(+(reverseDeltas[gene] / totalDeltasSum).toFixed(geneticAccuracy));\n        };\n        const parentCoupleWithProbability = [...genotypeChoiceProbability].sort().reverse().reduce((result, value, index, array) => {\n            ((index % 2) === 0) && result.push(array.slice(index, index + 2));\n            return result;\n        }, []).slice(0, genotypeChoiceProbability.length / 4);\n        const parentCoupleWithValues = [];\n        for (let gene = 0; gene < parentCoupleWithProbability.length; gene++) {\n            parentCoupleWithValues.push([\n                population[genotypeChoiceProbability.indexOf(parentCoupleWithProbability[gene][0])],\n                population[genotypeChoiceProbability.indexOf(parentCoupleWithProbability[gene][1])]\n            ]);\n        };\n        population = [];\n        for (let gene = 0; gene < parentCoupleWithValues.length; gene++) {\n            population.push(...genotypeCrossing(...parentCoupleWithValues[gene], crossoverLineIndex));\n        };\n        generationsQuantity /= 2;\n    };\n    performanceEnd = performance.now();\n    geneticAlgorithmPerformance = performanceEnd - performanceStart;\n    const deviance = ((f(...population[0]) - EQUATION.y) / f(...population[0], EQUATION)).toFixed(2) * 100;\n    return {\n        population: population,\n        generation: Math.log2(generationsQuantityParam) - 1,\n        deviance: deviance,\n        performanceTime: geneticAlgorithmPerformance\n    };\n};\n\nexport default function App() {\n  const [factorizedNumber, setFactorizedNumber] = useState('');\n  const [factorizedNumberAnswer, setFactorizedNumberAnswer] = useState('');\n  const [learningSpeed, setLearningSpeed] = useState(.001);\n  const [temporalDeadline, setTemporalDeadline] = useState(.05);\n  const [iterativeDeadline, setIterativeDeadline] = useState(100);\n  const [perceptronTrainingAnswer, setPerceptronTrainingAnswer] = useState(null);\n  const [equation, setEquation] = useState({});\n  const [generationsQuantity, setGenerationsQuantity] = useState(0);\n  const [crossoverLineIndex, setCrossoverLineIndex] = useState(0);\n  const [equationAnswer, setEquationAnswer] = useState({});\n  const deadlines = {\n    temporal: {isUsed: temporalDeadline > 0, seconds: temporalDeadline},\n    iterative: {isUsed: iterativeDeadline > 0, iterations: iterativeDeadline}\n  };\n  console.log(equationAnswer.deviance)\n  const BOUNDARY = +(equation.y / 2).toFixed(geneticAccuracy) || 0;\n  return (\n    <View style={styles.container}>\n      <Text style={styles.header}>Fermat's Factorization Method</Text>\n      <Text>{`A  *  B  =  ${factorizedNumber || ''}`}</Text>\n      <TextInput placeholder=\"Set Number\" keyboardType=\"number-pad\" onChangeText={text => setFactorizedNumber(text)}></TextInput>\n      <Button title=\"Number Factorization\" onPress={() => setFactorizedNumberAnswer(fErmatFactorization(+factorizedNumber))}></Button>\n      <Text>{factorizedNumberAnswer && `A  =  ${factorizedNumberAnswer[0]}  &  B  =  ${factorizedNumberAnswer[1]}`}</Text>\n      <Text style={styles.header}>Perceptron Model</Text>\n      <Text>Trigger Threshold: P = 4</Text>\n      <Text>Points: +A(0, 6), +B(1, 5), -C(3, 3) And -D(2, 4)</Text>\n      <TextInput placeholder=\"Learning Speed (0.001 by default)\" keyboardType=\"number-pad\" onChangeText={text => setLearningSpeed(text)}></TextInput>\n      <TextInput placeholder=\"Temporal Deadline, seconds (0.5s by default)\" keyboardType=\"number-pad\" onChangeText={text => setTemporalDeadline(text)}></TextInput>\n      <TextInput placeholder=\"Iterative Deadline (100 by default)\" keyboardType=\"number-pad\" onChangeText={text => setIterativeDeadline(text)}></TextInput>\n      <Button title=\"Train Perceptron\" onPress={() => setPerceptronTrainingAnswer(perceptronTraining(P, 5, learningSpeed, deadlines))}></Button>\n      <Text>{perceptronTrainingAnswer && `W1  =  ${perceptronTrainingAnswer[0]}  &  W2  =  ${perceptronTrainingAnswer[1]}`}</Text>\n      <Text>{perceptronTrainingAnswer && `Time spent:  ${perceptronTrainingAnswer[2].toFixed(5)} ms`}</Text>\n      <Text>{perceptronTrainingAnswer && `Iterations: ${perceptronTrainingAnswer[3]}`}</Text>\n      <Text>{perceptronTrainingAnswer && 'Checkup:'}</Text>\n      <Text>{perceptronTrainingAnswer && `A: ${POINTS[0].x1} * ${perceptronTrainingAnswer[0]} + ${POINTS[0].x2} * ${perceptronTrainingAnswer[1]} = ${outputSignal(POINTS[0], perceptronTrainingAnswer[0], perceptronTrainingAnswer[1])} > P`}</Text>\n      <Text>{perceptronTrainingAnswer && `B: ${POINTS[1].x1} * ${perceptronTrainingAnswer[0]} + ${POINTS[1].x2} * ${perceptronTrainingAnswer[1]} = ${outputSignal(POINTS[1], perceptronTrainingAnswer[0], perceptronTrainingAnswer[1])} > P`}</Text>\n      <Text>{perceptronTrainingAnswer && `C: ${POINTS[2].x1} * ${perceptronTrainingAnswer[0]} + ${POINTS[2].x2} * ${perceptronTrainingAnswer[1]} = ${outputSignal(POINTS[2], perceptronTrainingAnswer[0], perceptronTrainingAnswer[1])} < P`}</Text>\n      <Text>{perceptronTrainingAnswer && `D: ${POINTS[3].x1} * ${perceptronTrainingAnswer[0]} + ${POINTS[3].x2} * ${perceptronTrainingAnswer[1]} = ${outputSignal(POINTS[3], perceptronTrainingAnswer[0], perceptronTrainingAnswer[1])} < P`}</Text>\n      <Text style={styles.header}>Genetic Algorithm Research</Text>\n      <Text>{`Diophantine Equation: a * ${equation.x1 || 'x1'} + b * ${equation.x2 || 'x2'} + c * ${equation.x3 || 'x3'} + d * ${equation.x4 || 'x4'} = ${equation.y || 'y'}`}</Text>\n      <TextInput placeholder=\"Enter commas separated values of x1, x2, x3, x4, y\" onChangeText={text => {\n        const newEquationFromText = JSON.parse(`[${text}]`);\n        const newEquation = {\n          x1: newEquationFromText[0],\n          x2: newEquationFromText[1],\n          x3: newEquationFromText[2],\n          x4: newEquationFromText[3],\n          y: newEquationFromText[4]\n        };\n        setEquation(newEquation);\n      }}></TextInput>\n      <TextInput placeholder=\"Generations Quantity (2^value desirable)\" keyboardType=\"number-pad\" onChangeText={text => setGenerationsQuantity(text)}></TextInput>\n      <TextInput placeholder=\"Enter Crossover Line Index (1, 2 or 3)\" keyboardType=\"number-pad\" onChangeText={text => setCrossoverLineIndex(text)}></TextInput>\n      <Button title=\"Integer Roots Search\" onPress={() => setEquationAnswer(geneticAlgorithm(generationsQuantity, crossoverLineIndex, BOUNDARY, equation))}></Button>\n      <Text>{equationAnswer.population && `a  =  ${equationAnswer.population[0]}  &  b  =  ${equationAnswer.population[1]}  &  c  =  ${equationAnswer.population[2]}  &  d  =  ${equationAnswer.population[3]}`}</Text>\n      <Text>{equationAnswer.generation && `Generation: ${equationAnswer.generation}`}</Text>\n      <Text>{equationAnswer.population && `Deviance: ${equationAnswer.deviance}`}</Text>\n      <Text>{equationAnswer.performanceTime && `Time spent:  ${equationAnswer.performanceTime.toFixed(5)} ms`}</Text>\n      <Text>{equationAnswer.population && 'Checkup:'}</Text>\n      <Text>{equationAnswer.population && `${equationAnswer.population[0]} * ${equation.x1} + ${equationAnswer.population[1]} * ${equation.x2} + ${equationAnswer.population[2]} * ${equation.x3} + ${equationAnswer.population[3]} * ${equation.x4} = ${equation.y}`}</Text>\n      </View>\n  );\n};\n\n\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n    paddingTop: 30\n  },\n  ender: {\n    fontSize: 16,\n    paddingBottom: 30\n  }\n});\n"]},"metadata":{},"sourceType":"module"}